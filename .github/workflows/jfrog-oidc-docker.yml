name: "JFrog OIDC CI Workflow with Full Security Scan (Docker)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  BUILD_NAME: ${{ vars.BUILD_NAME || 'jfrog-docker-security-scan-build' }}
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER || github.run_id }}
  DOCKER_REPO:  ${{ vars.DOCKER_REPO  || 'notes-api-docker-repo' }}
  JF_REGISTRY:  ${{ vars.JF_REGISTRY  || 'aboavent.jfrog.io' }} # host ONLY (no https)
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}       # none|low|medium|high|critical
  XRAY_FORMAT: table
  UPLOAD_PATTERN: ${{ vars.UPLOAD_PATTERN || '**/*' }}
  UPLOAD_EXCLUSIONS: ${{ vars.UPLOAD_EXCLUSIONS || '**/.git/**;**/.github/**;**/.jfrog/**' }}

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                      # e.g., https://aboavent.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2nd; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          jf rt curl -s -XGET "/api/repositories/${{ env.DOCKER_REPO }}" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **DOCKER_REPO**: \`${{ env.DOCKER_REPO }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- Source SCA/SAST/Secrets/IaC audit (non-blocking) ----------
      - name: Repo audit (non-blocking)
        shell: bash
        run: jf audit . --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Build Docker image ----------
      - name: Compose image tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          NAME="notes-api"
          SHA_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${GITHUB_SHA}"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "sha_tag=${SHA_TAG}" >> "$GITHUB_OUTPUT"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image (local)
        shell: bash
        run: |
          set -euo pipefail
          docker build -t "${{ steps.tags.outputs.sha_tag }}" -t "${{ steps.tags.outputs.ref_tag }}" .

      # ---------- Pre-push Xray scan of local image ----------
      - name: Image scan (local with Docker)
        shell: bash
        run: |
          set -euo pipefail
          IMG="${{ steps.tags.outputs.sha_tag }}"
          echo "Scanning local image with Xray: ${IMG}"
          jf docker scan "${IMG}" --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Login & push to Artifactory (new docker syntax) ----------
      - name: Docker login to Artifactory
        shell: bash
        run: |
          set -euo pipefail
          jf docker login "${{ env.JF_REGISTRY }}"

      - name: Push images (record build-info)
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          jf docker push "${{ steps.tags.outputs.sha_tag }}" --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"
          jf docker push "${{ steps.tags.outputs.ref_tag }}" --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      # ---------- Publish build-info ----------
      - name: Publish build-info
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      # ---------- Xray Build Scan (policy-gated) ----------
      - name: Scan published build (policy-gated)
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi
