name: "JFrog OIDC CI Workflow with Curation + Xray (Docker)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  BUILD_NAME:     ${{ vars.BUILD_NAME     || 'jfrog-docker-security-scan-build' }}
  BUILD_NUMBER:   ${{ vars.BUILD_NUMBER   || github.run_id }}
  DOCKER_REPO:    ${{ vars.DOCKER_REPO    || 'notes-api-docker-repo' }}
  JF_REGISTRY:    ${{ vars.JF_REGISTRY    || 'aboavent.jfrog.io' }}     # host only
  CURATED_PYPI_VIRTUAL: ${{ vars.CURATED_PYPI_VIRTUAL || 'notes-api-pipy-curated' }}
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}               # none|Low|Medium|High|Critical
  XRAY_FORMAT: table

jobs:
  build-curate-scan-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          echo "CURATED_PYPI_VIRTUAL=${{ env.CURATED_PYPI_VIRTUAL }}"
          jf rt curl -s -XGET "/api/repositories/${{ env.DOCKER_REPO }}" | jq '{key,packageType,type}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **DOCKER_REPO**: \`${{ env.DOCKER_REPO }}\`"
            echo "- **Curated PyPI (virtual)**: \`${{ env.CURATED_PYPI_VIRTUAL }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- Curation (pip) ----------
      - name: Configure pip to resolve via curated PyPI (project)
        shell: bash
        run: |
          set -euo pipefail
          # You can use either 'jf pip-config' or the alias 'jf pip c'
          jf pip-config \
            --repo-resolve "${{ env.CURATED_PYPI_VIRTUAL }}" \
            --server-id-resolve "setup-jfrog-cli-server" \
            --global=false
          find .jfrog -maxdepth 3 -type f -print || true

      - name: Curation audit (requirements.txt)
        shell: bash
        run: jf curation-audit --requirements-file requirements.txt --format table || true

      # ---------- Build Docker image ----------
      - name: Compose image tag (ref)
        id: tags
        shell: bash
        run: |
          NAME="notes-api"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image (local)
        shell: bash
        run: |
          docker build -t "${{ steps.tags.outputs.ref_tag }}" .

      # ---------- Image scan with Xray (local daemon, non-blocking) ----------
      - name: Xray image scan (non-blocking)
        shell: bash
        run: |
          set -euo pipefail
          echo "Scanning local image: ${{ steps.tags.outputs.ref_tag }}"
          jf docker scan "${{ steps.tags.outputs.ref_tag }}" --format "${{ env.XRAY_FORMAT }}" || true

      # ---------- Push & record build-info ----------
      - name: Push image & record build-info (ref tag)
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          jf rt docker-push "${{ steps.tags.outputs.ref_tag }}" "${{ env.DOCKER_REPO }}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      # ---------- Publish build-info ----------
      - name: Publish build-info
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      # ---------- Xray Build Scan (policy-gated) ----------
      - name: Scan published build (policy-gated)
        env:
          BUILD_NAME:       ${{ env.BUILD_NAME }}
          BUILD_NUMBER:     ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi

      # ---------- Summarize Xray build scan ----------
      - name: Summarize Xray build scan in job summary
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --format simple-json | tee scan.json || true
          CRIT=$(jq '[.vulnerabilities[]? | select(.severity=="Critical")] | length' scan.json)
          HIGH=$(jq '[.vulnerabilities[]? | select(.severity=="High")] | length' scan.json)
          MED=$(jq  '[.vulnerabilities[]? | select(.severity=="Medium")] | length' scan.json)
          LOW=$(jq  '[.vulnerabilities[]? | select(.severity=="Low")]    | length' scan.json)
          {
            echo "### Xray Build Scan Results"
            echo "- **Build**: \`${BUILD_NAME}/${BUILD_NUMBER}\`"
            echo "- **Critical**: ${CRIT}"
            echo "- **High**: ${HIGH}"
            echo "- **Medium**: ${MED}"
            echo "- **Low**: ${LOW}"
          } >> "$GITHUB_STEP_SUMMARY"
