name: "JFrog OIDC CI Workflow with Curation + Xray (Docker + Python + Artifacts)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  BUILD_NAME:     ${{ vars.BUILD_NAME     || 'jfrog-docker-security-scan-build' }}
  BUILD_NUMBER:   ${{ vars.BUILD_NUMBER   || github.run_id }}
  # Artifactory / Xray
  DOCKER_REPO:    ${{ vars.DOCKER_REPO    || 'notes-api-docker-repo' }}
  JF_REGISTRY:    ${{ vars.JF_REGISTRY    || 'aboavent.jfrog.io' }}    # host only (no https)
  CURATED_PYPI_VIRTUAL: ${{ vars.CURATED_PYPI_VIRTUAL || 'notes-api-pypi-curated' }}
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}              # none|low|medium|high|critical
  XRAY_FORMAT: table
  # Generic artifacts repo (for source snapshot & SBOM uploads)
  ARTIFACTS_REPO: ${{ vars.ARTIFACTS_REPO || 'notes-api-generic-local' }}

jobs:
  build-curate-scan-publish:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup JFrog CLI (OIDC)"
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                       # e.g., https://aboavent.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration      # must exist in JFrog Platform

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          jf --version
          # Show docker repo info (jq is pre-installed on ubuntu-latest)
          jf rt curl -s -XGET "/api/repositories/${{ env.DOCKER_REPO }}" | jq '{key,packageType,type}'

      # ---------- Curation (pip) ----------
      - name: "Configure pip to resolve via curated PyPI (project)"
        shell: bash
        run: |
          set -euo pipefail
          jf pip-config \
            --repo-resolve "${{ env.CURATED_PYPI_VIRTUAL }}" \
            --server-id-resolve "setup-jfrog-cli-server" \
            --global=false
          find .jfrog -maxdepth 3 -type f -print || true

      - name: "Curation audit (requirements.txt)"
        shell: bash
        run: jf curation-audit --requirements-file requirements.txt --format table || true

      # ---------- Build Docker image ----------
      - name: "Compose image tag"
        id: tags
        shell: bash
        run: |
          NAME="notes-api"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: "Build image (local)"
        run: |
          docker build -t "${{ steps.tags.outputs.ref_tag }}" .

      - name: "Xray image scan (local daemon, non-blocking)"
        shell: bash
        run: jf docker scan "${{ steps.tags.outputs.ref_tag }}" --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Optional: publish repo assets to a Generic repo ----------
      - name: "Package repo snapshot (exclude VCS/CI folders)"
        shell: bash
        run: |
          set -euo pipefail
          SNAP="notes-api-${GITHUB_SHA}.tar.gz"
          tar -czf "$SNAP" --exclude .git --exclude .github --exclude .jfrog .
          ls -lh "$SNAP"

      - name: "Upload snapshot to Generic repo"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          SNAP="notes-api-${GITHUB_SHA}.tar.gz"
          jf rt u "$SNAP" "${{ env.ARTIFACTS_REPO }}/snapshots/${GITHUB_REF_NAME}/" \
            --props "app=notes-api;vcs.revision=${GITHUB_SHA}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      - name: "Create CycloneDX SBOM from source"
        shell: bash
        run: |
          set -euo pipefail
          jf scan . --fail=false --format cyclonedx > sbom.cdx.json
          test -s sbom.cdx.json && echo "SBOM created"

      - name: "Upload SBOM to Generic repo"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          jf rt u "sbom.cdx.json" "${{ env.ARTIFACTS_REPO }}/sbom/${GITHUB_REF_NAME}/" \
            --props "type=sbom;format=cyclonedx;app=notes-api;vcs.revision=${GITHUB_SHA}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      # ---------- Push & record build-info ----------
      - name: "Push image & record build-info (ref tag)"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          jf rt docker-push "${{ steps.tags.outputs.ref_tag }}" "${{ env.DOCKER_REPO }}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      # ---------- Publish build-info ----------
      - name: "Publish build-info"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        run: jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      # ---------- Xray Build Scan (policy-gated) ----------
      - name: "Scan published build (policy-gated)"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi

      - name: "Summarize Xray build scan in job summary"
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          set -euo pipefail
          jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --format simple-json | tee scan.json || true
          CRIT=$(jq '[.vulnerabilities[]? | select(.severity=="Critical")] | length' scan.json)
          HIGH=$(jq '[.vulnerabilities[]? | select(.severity=="High")] | length' scan.json)
          MED=$(jq  '[.vulnerabilities[]? | select(.severity=="Medium")] | length' scan.json)
          LOW=$(jq  '[.vulnerabilities[]? | select(.severity=="Low")]    | length' scan.json)
          {
            echo "### Xray Build Scan Results"
            echo "- **Build**: \`${BUILD_NAME}/${BUILD_NUMBER}\`"
            echo "- **Critical**: ${CRIT}"
            echo "- **High**: ${HIGH}"
            echo "- **Medium**: ${MED}"
            echo "- **Low**: ${LOW}"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- (Optional) Python package publish to PyPI-local ----------
      - name: "Build & publish Python package to PyPI-local (if pyproject.toml exists)"
        if: hashFiles('pyproject.toml') != ''
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          PIPY_LOCAL:   ${{ vars.PIPY_LOCAL || 'pypi-local' }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip build
          python -m build
          # Configure pip for deployment (uses same server id from setup action)
          jf pip-config --repo-deploy "${PIPY_LOCAL}" --server-id-deploy "setup-jfrog-cli-server" --global=false
          # Upload with build-info
          jf rt u "dist/*" "${PIPY_LOCAL}/" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"
