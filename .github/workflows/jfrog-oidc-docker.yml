name: "JFrog OIDC CI Workflow with Full Security Scan (Docker)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  BUILD_NAME: ${{ vars.BUILD_NAME || 'jfrog-docker-security-scan-build' }}
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER || github.run_id }}
  GENERIC_REPO: ${{ vars.GENERIC_REPO || 'my-generic-repo' }}
  DOCKER_REPO:  ${{ vars.DOCKER_REPO  || 'myrepo-docker' }}
  JF_REGISTRY:  ${{ vars.JF_REGISTRY  || 'aboavent.jfrog.io' }} # host only
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}       # none|low|medium|high|critical
  XRAY_FORMAT: table
  UPLOAD_PATTERN: ${{ vars.UPLOAD_PATTERN || '**/*' }}
  UPLOAD_EXCLUSIONS: ${{ vars.UPLOAD_EXCLUSIONS || '**/.git/**;**/.github/**;**/.jfrog/**' }}

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: verify Artifactory Docker repo exists"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          if ! jf rt curl -sf -XGET "/api/repositories/${{ env.DOCKER_REPO }}" > repo.json; then
            echo "::error::Artifactory Docker repo '${{ env.DOCKER_REPO }}' not found at ${{ vars.JF_URL }}"
            exit 1
          fi
          jq '{key,packageType,type}' repo.json || cat repo.json
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **DOCKER_REPO**: \`${{ env.DOCKER_REPO }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # SAST/Secrets/IaC scan (non-blocking) – source code
      - name: Scan repository (non-blocking)
        shell: bash
        run: jf scan . --fail=false --format "${{ env.XRAY_FORMAT }}"

      # Build
      - name: Compose image tags
        id: tags
        shell: bash
        run: |
          NAME="notes-api"
          SHA_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${GITHUB_SHA}"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "sha_tag=${SHA_TAG}" >> "$GITHUB_OUTPUT"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image (local)
        shell: bash
        run: |
          docker build -t "${{ steps.tags.outputs.sha_tag }}" -t "${{ steps.tags.outputs.ref_tag }}" .

      # Optional pre-push image scan (with tar fallback)
      - name: Image scan (local; fallback to tar)
        shell: bash
        run: |
          set -euo pipefail
          IMG="${{ steps.tags.outputs.sha_tag }}"
          echo "Verifying local image: ${IMG}"
          if docker inspect "${IMG}" >/dev/null 2>&1; then
            echo "Scanning with Xray (local daemon)…"
            jf scan "docker://${IMG}" --fail=false --format "${{ env.XRAY_FORMAT }}" || {
              echo "Direct scan failed; saving image to tar and scanning tar as fallback…"
              docker save "${IMG}" -o image.tar
              jf scan "image.tar" --fail=false --format "${{ env.XRAY_FORMAT }}"
            }
          else
            echo "::warning::Local image '${IMG}' not found; skipping pre-push scan."
          fi

      # PUSH (new syntax). Build info via env vars.
      - name: Push image & record build-info
        env:
          JFROG_CLI_BUILD_NAME: ${{ env.BUILD_NAME }}
          JFROG_CLI_BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          jf docker push "${{ steps.tags.outputs.sha_tag }}"
          jf docker push "${{ steps.tags.outputs.ref_tag }}"

      - name: Publish build-info
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      - name: Scan published build (policy-gated)
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi
