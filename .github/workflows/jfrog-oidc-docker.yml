name: "JFrog OIDC CI Workflow with Full Security Scan (Docker)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION:  ${{ vars.PYTHON_VERSION  || '3.11' }}
  BUILD_NAME:      ${{ vars.BUILD_NAME      || 'jfrog-docker-security-scan-build' }}
  BUILD_NUMBER:    ${{ vars.BUILD_NUMBER    || github.run_id }}
  DOCKER_REPO:     ${{ vars.DOCKER_REPO     || 'notes-api-docker-repo' }}
  JF_REGISTRY:     ${{ vars.JF_REGISTRY     || 'aboavent.jfrog.io' }} # host only
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}            # none|low|medium|high|critical
  XRAY_FORMAT: table
  JFROG_CLI_LOG_LEVEL: ERROR

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}         # e.g. https://aboavent.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          jf rt curl -s -XGET "/api/repositories/${{ env.DOCKER_REPO }}" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **DOCKER_REPO**: \`${{ env.DOCKER_REPO }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- Source scans: SAST / Secrets / IaC (non-blocking) ----------
      - name: Audit repository (non-blocking)
        run: jf audit . --fail=false --format "${{ env.XRAY_FORMAT }}"

      - name: Scan repository (non-blocking)
        run: jf scan . --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Build Docker image ----------
      - name: Compose image tags
        id: tags
        shell: bash
        run: |
          NAME="notes-api"
          SHA_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${GITHUB_SHA}"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "sha_tag=${SHA_TAG}" >> "$GITHUB_OUTPUT"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image (local)
        run: |
          docker build -t "${{ steps.tags.outputs.sha_tag }}" -t "${{ steps.tags.outputs.ref_tag }}" .

      # ---------- Image scan (local daemon, non-blocking; with tar fallback) ----------
      - name: Xray scan Docker image (non-blocking)
        shell: bash
        run: |
          set -euo pipefail
          echo "Verifying local image:"
          docker image inspect "${{ steps.tags.outputs.sha_tag }}" >/dev/null
          echo "Scanning with Xray (local daemon)…"
          jf docker scan "${{ steps.tags.outputs.sha_tag }}" --fail=false --format "${{ env.XRAY_FORMAT }}" || {
            echo "Direct scan failed; saving image to tar and scanning tar as fallback…"
            docker save "${{ steps.tags.outputs.sha_tag }}" -o image.tar
            jf scan image.tar --fail=false --format "${{ env.XRAY_FORMAT }}"
          }

      # ---------- Push & record build-info ----------
      - name: Push image & record build-info (both tags)
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          jf rt docker-push "${{ steps.tags.outputs.sha_tag }}" "${{ env.DOCKER_REPO }}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"
          jf rt docker-push "${{ steps.tags.outputs.ref_tag }}" "${{ env.DOCKER_REPO }}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      - name: Publish build-info
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        run: jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      # ---------- Xray Build Scan (policy-gated) ----------
      - name: Scan published build (policy-gated)
        env:
          BUILD_NAME:       ${{ env.BUILD_NAME }}
          BUILD_NUMBER:     ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi

      - name: Summarize Xray build scan in job summary
        env:
          BUILD_NAME:   ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        run: |
          set -euo pipefail
          jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --format simple-json | tee scan.json || true
          CRIT=$(jq '[.vulnerabilities[]? | select(.severity=="Critical")] | length' scan.json)
          HIGH=$(jq '[.vulnerabilities[]? | select(.severity=="High")] | length' scan.json)
          MED=$(jq  '[.vulnerabilities[]? | select(.severity=="Medium")] | length' scan.json)
          LOW=$(jq  '[.vulnerabilities[]? | select(.severity=="Low")]    | length' scan.json)
          {
            echo "### Xray Build Scan Results"
            echo "- **Build**: \`${BUILD_NAME}/${BUILD_NUMBER}\`"
            echo "- **Critical**: ${CRIT}"
            echo "- **High**: ${HIGH}"
            echo "- **Medium**: ${MED}"
            echo "- **Low**: ${LOW}"
          } >> "$GITHUB_STEP_SUMMARY"
