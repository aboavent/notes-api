name: "JFrog OIDC CI Workflow with Curation + Xray (Docker)"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  BUILD_NAME: ${{ vars.BUILD_NAME || github.workflow }}
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER || github.run_id }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO || 'notes-api-docker-repo' }}
  JF_REGISTRY: ${{ vars.JF_REGISTRY || 'aboavent.jfrog.io' }}     # host only
  CURATED_PYPI_VIRTUAL: ${{ vars.CURATED_PYPI_VIRTUAL || 'pypi-curated' }}
  FAIL_ON_SEVERITY: ${{ vars.FAIL_ON_SEVERITY || 'none' }}         # none|low|medium|high|critical
  XRAY_FORMAT: table
  JFROG_CLI_LOG_LEVEL: ERROR
  JFROG_CLI_OFFER_CONFIG: false
  JFROG_CLI_ENV_EXCLUDE: "*password*;*secret*;*key*;*token*;*auth*;JF_ARTIFACTORY_*;JF_ENV_*;JF_URL;JF_USER;JF_PASSWORD;JF_ACCESS_TOKEN"

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                                # e.g. https://aboavent.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "DOCKER_REPO=${{ env.DOCKER_REPO }}"
          jf rt curl -s -XGET "/api/repositories/${{ env.DOCKER_REPO }}" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **DOCKER_REPO**: \`${{ env.DOCKER_REPO }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---------- Curation (pre-resolve) ----------
      - name: Curation audit (requirements.txt)
        shell: bash
        run: |
          jf curation-audit --requirements-file requirements.txt --format table || true

      # ---------- Source scan: SAST / Secrets / IaC (non-blocking) ----------
      - name: Scan repository (non-blocking)
        shell: bash
        run: jf scan . --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Build Docker image (tag = branch) ----------
      - name: Compose image tag (branch)
        id: tags
        shell: bash
        run: |
          NAME="notes-api"
          SAFE_BRANCH=$(echo "${GITHUB_REF_NAME:-main}" | tr '/ ' '--')
          REF_TAG="${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${NAME}:${SAFE_BRANCH}"
          echo "ref_tag=${REF_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image
        shell: bash
        run: |
          docker build -t "${{ steps.tags.outputs.ref_tag }}" .

      # ---------- Xray image scan (local daemon, non-blocking) ----------
      - name: Docker image scan (local, non-blocking)
        shell: bash
        run: |
          jf docker scan "${{ steps.tags.outputs.ref_tag }}" --fail=false --format "${{ env.XRAY_FORMAT }}"

      # ---------- Push & Build-Info (only on 'main') ----------
      - name: Docker login (Artifactory via JF CLI)
        if: github.ref_name == 'main'
        shell: bash
        run: jf docker login "${{ env.JF_REGISTRY }}"

      - name: Push image & record build-info (main only)
        if: github.ref_name == 'main'
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: |
          jf docker push "${{ steps.tags.outputs.ref_tag }}" \
            --build-name "${BUILD_NAME}" --build-number "${BUILD_NUMBER}"

      - name: Publish build-info (main only)
        if: github.ref_name == 'main'
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
        shell: bash
        run: jf rt build-publish "${BUILD_NAME}" "${BUILD_NUMBER}"

      # ---------- Xray Build Scan (policy-gated, main only) ----------
      - name: Scan published build (policy-gated, main only)
        if: github.ref_name == 'main'
        env:
          BUILD_NAME: ${{ env.BUILD_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          FAIL_ON_SEVERITY: ${{ env.FAIL_ON_SEVERITY }}
        shell: bash
        run: |
          if [ "${FAIL_ON_SEVERITY}" = "none" ]; then
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" || true
          else
            jf bs "${BUILD_NAME}" "${BUILD_NUMBER}" --fail-on-severity "${FAIL_ON_SEVERITY}"
          fi
